// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ReadAcross.Data;

#nullable disable

namespace ReadAcross.Migrations
{
    [DbContext(typeof(ReadAcrossContext))]
    partial class ReadAcrossContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("ReadAcross.Models.Catalyst", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Catalyst");
                });

            modelBuilder.Entity("ReadAcross.Models.Compound", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CasNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Compound");
                });

            modelBuilder.Entity("ReadAcross.Models.FunctionalGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Smarts")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("URL")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("FunctionalGroup");
                });

            modelBuilder.Entity("ReadAcross.Models.NamedReaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AcidBase")
                        .HasColumnType("TEXT");

                    b.Property<long>("CatalystId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("FunctionalGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Heat")
                        .HasColumnType("TEXT");

                    b.Property<string>("Image")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Product")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReactantA")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReactantB")
                        .HasColumnType("TEXT");

                    b.Property<string>("ReactantC")
                        .HasColumnType("TEXT");

                    b.Property<long>("SolventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Url")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CatalystId");

                    b.HasIndex("FunctionalGroupId");

                    b.HasIndex("SolventId");

                    b.ToTable("NamedReaction");
                });

            modelBuilder.Entity("ReadAcross.Models.NamedReactionByProducts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("NamedreactionId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ReactantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NamedreactionId");

                    b.HasIndex("ReactantId");

                    b.ToTable("NamedReactionByProducts");
                });

            modelBuilder.Entity("ReadAcross.Models.NamedReactionReactants", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("NamedreactionId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ReactantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("NamedreactionId");

                    b.HasIndex("ReactantId");

                    b.ToTable("NamedReactionReactants");
                });

            modelBuilder.Entity("ReadAcross.Models.Reactant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Temp2")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Reactant");
                });

            modelBuilder.Entity("ReadAcross.Models.Reference", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("FunctionalGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("ReactionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Risdata")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("FunctionalGroupId");

                    b.HasIndex("ReactionId");

                    b.ToTable("Reference");
                });

            modelBuilder.Entity("ReadAcross.Models.Solvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Solvent");
                });

            modelBuilder.Entity("ReadAcross.Models.NamedReaction", b =>
                {
                    b.HasOne("ReadAcross.Models.Catalyst", "Catalyst")
                        .WithMany("AppNamedreaction")
                        .HasForeignKey("CatalystId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadAcross.Models.FunctionalGroup", "FunctionalGroup")
                        .WithMany("AppNamedreaction")
                        .HasForeignKey("FunctionalGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadAcross.Models.Solvent", "Solvent")
                        .WithMany("AppNamedreaction")
                        .HasForeignKey("SolventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Catalyst");

                    b.Navigation("FunctionalGroup");

                    b.Navigation("Solvent");
                });

            modelBuilder.Entity("ReadAcross.Models.NamedReactionByProducts", b =>
                {
                    b.HasOne("ReadAcross.Models.NamedReaction", "Namedreaction")
                        .WithMany("AppNamedreactionByProducts")
                        .HasForeignKey("NamedreactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadAcross.Models.Reactant", "Reactant")
                        .WithMany("AppNamedreactionByProducts")
                        .HasForeignKey("ReactantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Namedreaction");

                    b.Navigation("Reactant");
                });

            modelBuilder.Entity("ReadAcross.Models.NamedReactionReactants", b =>
                {
                    b.HasOne("ReadAcross.Models.NamedReaction", "Namedreaction")
                        .WithMany("AppNamedreactionReactants")
                        .HasForeignKey("NamedreactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ReadAcross.Models.Reactant", "Reactant")
                        .WithMany("AppNamedreactionReactants")
                        .HasForeignKey("ReactantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Namedreaction");

                    b.Navigation("Reactant");
                });

            modelBuilder.Entity("ReadAcross.Models.Reference", b =>
                {
                    b.HasOne("ReadAcross.Models.FunctionalGroup", "FunctionalGroup")
                        .WithMany("AppReference")
                        .HasForeignKey("FunctionalGroupId");

                    b.HasOne("ReadAcross.Models.NamedReaction", "Reaction")
                        .WithMany("AppReference")
                        .HasForeignKey("ReactionId");

                    b.Navigation("FunctionalGroup");

                    b.Navigation("Reaction");
                });

            modelBuilder.Entity("ReadAcross.Models.Catalyst", b =>
                {
                    b.Navigation("AppNamedreaction");
                });

            modelBuilder.Entity("ReadAcross.Models.FunctionalGroup", b =>
                {
                    b.Navigation("AppNamedreaction");

                    b.Navigation("AppReference");
                });

            modelBuilder.Entity("ReadAcross.Models.NamedReaction", b =>
                {
                    b.Navigation("AppNamedreactionByProducts");

                    b.Navigation("AppNamedreactionReactants");

                    b.Navigation("AppReference");
                });

            modelBuilder.Entity("ReadAcross.Models.Reactant", b =>
                {
                    b.Navigation("AppNamedreactionByProducts");

                    b.Navigation("AppNamedreactionReactants");
                });

            modelBuilder.Entity("ReadAcross.Models.Solvent", b =>
                {
                    b.Navigation("AppNamedreaction");
                });
#pragma warning restore 612, 618
        }
    }
}
